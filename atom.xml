<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin&#39;s blog</title>
  
  
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-10-27T05:10:41.992Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kevin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【数据结构】C语言线性表-链表</title>
    <link href="http://yoursite.com/2020/10/27/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91C%E8%AF%AD%E8%A8%80%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/10/27/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91C%E8%AF%AD%E8%A8%80%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%93%BE%E8%A1%A8/</id>
    <published>2020-10-27T05:02:45.000Z</published>
    <updated>2020-10-27T05:10:41.992Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>从上篇的代码中可见，线性表的顺序存储结构的特点是逻辑关系上相邻的两个元素在物理位置上也相邻，然而这个特点也铸成了这个存储结构的弱点：在插入或删除操作时，需要移动大量元素</p></blockquote><h1 id="线性链表"><a href="#线性链表" class="headerlink" title="线性链表"></a>线性链表</h1><p>线性表的链式存储结构的特点是用一组<strong>任意的</strong>存储单元存储线性表的数据元素（可以连续，也可以是不连续的）</p><p>以下是C++实现过程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;node;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="function">node *<span class="title">InitNode</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//在链表p中第add位置插入elem元素</span></span><br><span class="line"><span class="function">node *<span class="title">AddNode</span><span class="params">(node *p,<span class="keyword">int</span> add,<span class="keyword">int</span> elem)</span></span>;</span><br><span class="line"><span class="comment">//删除链表p中元素del</span></span><br><span class="line"><span class="function">node *<span class="title">DelNode</span><span class="params">(node *p,<span class="keyword">int</span> del)</span></span>;</span><br><span class="line"><span class="comment">//修改链表p中edit位置上的elem元素</span></span><br><span class="line"><span class="function">node *<span class="title">EditNode</span><span class="params">(node *p,<span class="keyword">int</span> edit,<span class="keyword">int</span> elem)</span></span>;</span><br><span class="line"><span class="comment">//查询链表p中elem元素的位置（返回查询位置）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SelectNode</span><span class="params">(node *p,<span class="keyword">int</span> elem)</span></span>;</span><br><span class="line"><span class="comment">//遍历链表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(node *p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *p = InitNode();</span><br><span class="line">    AddNode(p,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    AddNode(p,<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">    AddNode(p,<span class="number">1</span>,<span class="number">3</span>);</span><br><span class="line">    AddNode(p,<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"插入1234："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    Display(p);</span><br><span class="line"></span><br><span class="line">    DelNode(p,<span class="number">2</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"删除第二个元素："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    Display(p);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"修改第三个元素为20："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    EditNode(p,<span class="number">3</span>,<span class="number">20</span>);</span><br><span class="line">    Display(p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = SelectNode(p,<span class="number">20</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"查询20的结点："</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">InitNode</span><span class="params">()</span></span>&#123;</span><br><span class="line">    node *p = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>)); <span class="comment">//创建头指针</span></span><br><span class="line">    <span class="keyword">if</span>(!p)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"Error"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;next = <span class="literal">NULL</span>;<span class="comment">//将头指针指向NULL</span></span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">AddNode</span><span class="params">(node *p,<span class="keyword">int</span> add,<span class="keyword">int</span> elem)</span></span>&#123;</span><br><span class="line"><span class="comment">//创建临时结点（防止破坏p链表）</span></span><br><span class="line">    node *temp = p;</span><br><span class="line">    <span class="comment">//遍历查找插入位置的前一个结点</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;add;i++)&#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建结点a并给数据域赋值</span></span><br><span class="line">    node *a = (node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(node));</span><br><span class="line">    a-&gt;data = elem;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将结点a先连接temp下个结点（防止结点中断）</span></span><br><span class="line">    <span class="comment">//后将结点a连接到结点temp</span></span><br><span class="line">    a-&gt;next = temp-&gt;next;</span><br><span class="line">    temp-&gt;next = a;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">DelNode</span><span class="params">(node *p,<span class="keyword">int</span> del)</span></span>&#123;</span><br><span class="line">    node *temp = p;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;del;i++)&#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//存储将要删除的结点指针，链表连接成功后并释放</span></span><br><span class="line">    node *a = temp-&gt;next;</span><br><span class="line">    temp-&gt;next = a-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(a);</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node *<span class="title">EditNode</span><span class="params">(node *p,<span class="keyword">int</span> edit,<span class="keyword">int</span> elem)</span></span>&#123;</span><br><span class="line">    node *temp = p;</span><br><span class="line">    <span class="comment">//指向首元结点</span></span><br><span class="line">    temp = temp-&gt;next;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;edit;i++)&#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    temp-&gt;data = elem;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SelectNode</span><span class="params">(node *p,<span class="keyword">int</span> elem)</span></span>&#123;</span><br><span class="line">    node *temp = p;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">1</span>;<span class="comment">//定义查找elem元素位置为1</span></span><br><span class="line">    <span class="keyword">while</span>(temp-&gt;next)&#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">        <span class="keyword">if</span>(temp-&gt;data == elem)&#123;</span><br><span class="line">            <span class="keyword">return</span> num;</span><br><span class="line">        &#125;</span><br><span class="line">        num++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(node *p)</span></span>&#123;</span><br><span class="line">    node *temp = p;</span><br><span class="line">    <span class="keyword">while</span>(temp-&gt;next)&#123;</span><br><span class="line">        temp = temp-&gt;next;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;temp-&gt;data&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">插入1234：</span><br><span class="line">4 3 2 1 </span><br><span class="line">删除第二个元素：</span><br><span class="line">4 2 1 </span><br><span class="line">修改第三个元素为20：</span><br><span class="line">4 2 20 </span><br><span class="line">查询20的结点：3</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;从上篇的代码中可见，线性表的顺序存储结构的特点是逻辑关系上相邻的两个元素在物理位置上也相邻，然而这个特点也铸成了这个存储结构的弱点：在插入或删除操作时，需要移动大量元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;线性链表&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>【数据结构】C语言线性表-顺序表</title>
    <link href="http://yoursite.com/2020/10/27/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91C%E8%AF%AD%E8%A8%80%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%A1%BA%E5%BA%8F%E8%A1%A8/"/>
    <id>http://yoursite.com/2020/10/27/%E3%80%90%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E3%80%91C%E8%AF%AD%E8%A8%80%E7%BA%BF%E6%80%A7%E8%A1%A8-%E9%A1%BA%E5%BA%8F%E8%A1%A8/</id>
    <published>2020-10-27T04:58:40.000Z</published>
    <updated>2020-10-27T05:10:07.551Z</updated>
    
    <content type="html"><![CDATA[<h1 id="什么是线性表"><a href="#什么是线性表" class="headerlink" title="什么是线性表"></a>什么是线性表</h1><p>线性表是最常用且最简单的一种数据结构。简言之，一个线性表是n个数据元素的有限序列。</p><h1 id="线性结构特点"><a href="#线性结构特点" class="headerlink" title="线性结构特点"></a>线性结构特点</h1><p>在数据元素的非空有限集合中</p><ol><li>存在唯一的一个被称做“第一个”的数据元素</li><li>存在唯一的一个被称做“最后一个”的数据元素</li><li>除第一个之外，集合中的每个数据元素均只有一个前驱</li><li>除最后一个之外，集合中每个数据元素均只有一个后继</li></ol><h1 id="顺序表的实现"><a href="#顺序表的实现" class="headerlink" title="顺序表的实现"></a>顺序表的实现</h1><p>顺序表示的是用一组地址连续的存储单元依次存储线性表的数据元素<br>以下是C++的实现过程<br><em>注：C语言不可使用引用</em></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SIZE 5<span class="comment">//顺序表大小</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ElemType int<span class="comment">//元素数据类型</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span>&#123;</span></span><br><span class="line">    ElemType *elem;<span class="comment">//存储空间基地址（动态数组）</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//数组长度</span></span><br><span class="line">    <span class="keyword">int</span> size;<span class="comment">//数组大小</span></span><br><span class="line">&#125;<span class="built_in">list</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//状态码 1成功 -1失败</span></span><br><span class="line"><span class="comment">//初始化顺序表L</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitList</span><span class="params">(<span class="built_in">list</span> &amp;L)</span></span>;</span><br><span class="line"><span class="comment">//在顺序L中第i个位置插入NewElem元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertList</span><span class="params">(<span class="built_in">list</span> &amp;L,<span class="keyword">int</span> i,ElemType NewElem)</span></span>;</span><br><span class="line"><span class="comment">//删除顺序表L中第i个位置上的元素，并将其值保存到常量DelElem</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteList</span><span class="params">(List &amp;L,<span class="keyword">int</span> i,ElemType &amp;DelElem)</span></span>;</span><br><span class="line"><span class="comment">//修改顺序表L中第i个位置元素为NewElem元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AmendList</span><span class="params">(<span class="built_in">list</span> &amp;L,<span class="keyword">int</span> i,ElemType NewElem)</span></span>;</span><br><span class="line"><span class="comment">//查询顺序表L中元素e的位置（返回查询位置）</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SelectList</span><span class="params">(<span class="built_in">list</span> L,ElemType e)</span></span>;</span><br><span class="line"><span class="comment">//遍历顺序表</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(<span class="built_in">list</span> L)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">list</span> L;</span><br><span class="line">    ElemType DelElem;</span><br><span class="line"></span><br><span class="line">    InitList(L);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"定义初始值："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    InsertList(L,<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">    InsertList(L,<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line">    InsertList(L,<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line">    InsertList(L,<span class="number">4</span>,<span class="number">4</span>);</span><br><span class="line">    InsertList(L,<span class="number">5</span>,<span class="number">5</span>);</span><br><span class="line">    Display(L);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"在第2个位置插入元素35："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    InsertList(L,<span class="number">2</span>,<span class="number">35</span>);</span><br><span class="line">    Display(L);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"删除第3个元素的值为："</span>;</span><br><span class="line">    DeleteList(L,<span class="number">3</span>,DelElem);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;DelElem&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    Display(L);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"更改第五个位置的元素为33："</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    AmendList(L,<span class="number">5</span>,<span class="number">33</span>);</span><br><span class="line">    Display(L);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="string">"查询元素3的位置："</span>;</span><br><span class="line">    <span class="keyword">int</span> num = SelectList(L,<span class="number">3</span>);</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;num&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InitList</span><span class="params">(<span class="built_in">list</span> &amp;L)</span></span>&#123;</span><br><span class="line">    L.elem = (ElemType*)<span class="built_in">malloc</span>(SIZE * <span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">    <span class="keyword">if</span>(!L.elem)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"初始化失败\n"</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">-1</span>);<span class="comment">//初始化失败直接退出</span></span><br><span class="line">    &#125;</span><br><span class="line">    L.length = <span class="number">0</span>;</span><br><span class="line">    L.size = SIZE;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">InsertList</span><span class="params">(<span class="built_in">list</span> &amp;L,<span class="keyword">int</span> i,ElemType NewElem)</span></span>&#123;</span><br><span class="line">    <span class="comment">//在顺序表L中第i个位置插入新元素NewElem</span></span><br><span class="line">    <span class="comment">//判断插入位置，不能小于1，不能大于表长度</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L.length+<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"插入位置不合法"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断顺序表存储空间是否满足</span></span><br><span class="line">    <span class="keyword">if</span>(L.length &gt;= L.size)&#123;</span><br><span class="line">        <span class="comment">//使用新变量分配空间用来if判断是否分配成功，很多人使用的L.elem = (ElemType*)realloc...，即便判断也是为真</span></span><br><span class="line">        ElemType *newbase  = (ElemType*)<span class="built_in">realloc</span>(L.elem, (L.size+<span class="number">1</span>)*<span class="keyword">sizeof</span>(ElemType));</span><br><span class="line">        <span class="keyword">if</span>(!newbase)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"内存分配失败\n"</span>);</span><br><span class="line">            <span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        L.elem = newbase;<span class="comment">//新基址</span></span><br><span class="line">        L.size++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//为插入变量，元素后移</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p=L.length<span class="number">-1</span>; p&gt;=i<span class="number">-1</span>; p--)&#123;</span><br><span class="line">        L.elem[p+<span class="number">1</span>] = L.elem[p];</span><br><span class="line">    &#125;</span><br><span class="line">    L.elem[i<span class="number">-1</span>] = NewElem;</span><br><span class="line">    L.length++;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DeleteList</span><span class="params">(List &amp;L,<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//在顺序表L中删除第i个元素，并返回其值e</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L.length)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"删除位置不合法!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    e = L.elem[i<span class="number">-1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> p=i;p&lt;L.length;p++)&#123;</span><br><span class="line">        L.elem[p<span class="number">-1</span>] = L.elem[p];</span><br><span class="line">    &#125;</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">AmendList</span><span class="params">(<span class="built_in">list</span> &amp;L,<span class="keyword">int</span> i,ElemType NewElem)</span></span>&#123;</span><br><span class="line"><span class="comment">//插入位置如果小于1或者大于顺序表的长度则返回-1</span></span><br><span class="line">    <span class="keyword">if</span>(i&lt;<span class="number">1</span> || i&gt;L.length)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">"更改的位置有误!"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    L.elem[i<span class="number">-1</span>] = NewElem;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SelectList</span><span class="params">(<span class="built_in">list</span> L,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="comment">//在顺序表L中查找e元素的位置，若不存在则返回-1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(L.elem[i] == e)&#123;</span><br><span class="line">            <span class="keyword">return</span> i+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Display</span><span class="params">(<span class="built_in">list</span> L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;L.length;i++)&#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;L.elem[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">定义初始值：</span><br><span class="line">1 2 3 4 5 </span><br><span class="line">在第2个位置插入元素35：</span><br><span class="line">1 35 2 3 4 5 </span><br><span class="line">删除第3个元素的值为：2</span><br><span class="line">1 35 3 4 5 </span><br><span class="line">更改第五个位置的元素为33：</span><br><span class="line">1 35 3 4 33 </span><br><span class="line">查询元素3的位置：3</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;什么是线性表&quot;&gt;&lt;a href=&quot;#什么是线性表&quot; class=&quot;headerlink&quot; title=&quot;什么是线性表&quot;&gt;&lt;/a&gt;什么是线性表&lt;/h1&gt;&lt;p&gt;线性表是最常用且最简单的一种数据结构。简言之，一个线性表是n个数据元素的有限序列。&lt;/p&gt;
&lt;h1 id=&quot;</summary>
      
    
    
    
    <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Vim强化配置(效果如IDE)</title>
    <link href="http://yoursite.com/2020/10/05/Vim%E5%BC%BA%E5%8C%96%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2020/10/05/Vim%E5%BC%BA%E5%8C%96%E9%85%8D%E7%BD%AE/</id>
    <published>2020-10-05T09:38:42.000Z</published>
    <updated>2020-10-05T09:38:42.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为非常强大的vim编辑器，再加上一些辅助插件简直如虎添翼，而配置参数一定是通过精心的设置</p></blockquote><a id="more"></a><p>具有YouCompleteMe语句补全插件、语法高亮、语句补全、目录树、显示行号、自动缩进、自动添加头文件等等功能</p><p>将编辑器实现 IDE 的转变</p><p>配置文件的位置：</p><p>​        全局设置：/etc/vim/vimrc</p><p>​        局部设置：~/.vimrc</p><p><em>注：若不存在 .vimrc 需自行创建</em></p><h2 id="Vundle安装"><a href="#Vundle安装" class="headerlink" title="Vundle安装"></a>Vundle安装</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Vundle 是 Vim bundle 的简称，是一个 Vim 插件管理器（bundle 是 打包的文件、程序的集合）</p><p>我们在配置 Vim 前将需要一些工具来安装和管理插件</p><p>主要特点：</p><ul><li>在 .vimrc 中跟踪和管理插件</li><li>通过插件名搜索 Vim script 中的插件</li><li>清理未使用的插件</li></ul><h3 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h3><p>很明显是需要你的系统拥有 Git 的工作环境，请自行安装</p><p>当然也可以在 github 手动下载进行操作</p><p><code>$ git clone https://github.com/gmarik/vundle.git ~/.vim/bundle/vundle</code></p><p>如果使用文章中的配置，请直接跳到<strong>“插件安装”</strong>这一步</p><h4 id="插件配置"><a href="#插件配置" class="headerlink" title="插件配置"></a>插件配置</h4><p>打开文件 .vimrc，在内容添加你需要配置的插件</p><p><code>$ vim ~/.vimrc</code></p><p>添加格式：</p><p>Plugin ‘[插件名或插件地址]’</p><h4 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h4><p>一共分为两步：</p><ul><li><p>打开 Vim 编辑器</p><p><code>$ vim</code></p></li><li><p>进入命令模式输入</p><p><code>:Pluginstall</code></p></li></ul><p>常用的命令：</p><p>​        :PluginList      列出所有已配置的插件</p><p>​        :PluginInstall       - 安装插件,追加 <code>!</code> 用以更新或使用 :PluginUpdate “ </p><p>​        :PluginSearch foo - 搜索 foo ; 追加 <code>!</code> 清除本地缓存 “ </p><p>​        :PluginClean      - 清除未使用插件,需要确认; 追加 <code>!</code> 自动批准移除未使用插件</p><h2 id="Vim配置"><a href="#Vim配置" class="headerlink" title="Vim配置"></a>Vim配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br></pre></td><td class="code"><pre><span class="line">set nocompatible</span><br><span class="line">filetype on</span><br><span class="line"> </span><br><span class="line">set rtp+&#x3D;~&#x2F;.vim&#x2F;bundle&#x2F;Vundle.vim</span><br><span class="line">call vundle#begin()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&quot; 这里根据自己需要的插件来设置，以下是我的配置 &quot;</span><br><span class="line">&quot;</span><br><span class="line">&quot; YouCompleteMe:语句补全插件</span><br><span class="line">set runtimepath+&#x3D;~&#x2F;.vim&#x2F;bundle&#x2F;YouCompleteMe</span><br><span class="line">autocmd InsertLeave * if pumvisible() &#x3D;&#x3D; 0|pclose|endif &quot;离开插入模式后自动关闭预览窗口&quot;</span><br><span class="line">let g:ycm_collect_identifiers_from_tags_files &#x3D; 1           &quot; 开启 YCM基于标签引擎</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings &#x3D; 1 &quot; 注释与字符串中的内容也用于补全</span><br><span class="line">let g:syntastic_ignore_files&#x3D;[&quot;.*\.py$&quot;]</span><br><span class="line">let g:ycm_seed_identifiers_with_syntax &#x3D; 1                  &quot; 语法关键字补全</span><br><span class="line">let g:ycm_complete_in_comments &#x3D; 1</span><br><span class="line">let g:ycm_confirm_extra_conf &#x3D; 0                            &quot; 关闭加载.ycm_extra_conf.py提示</span><br><span class="line">let g:ycm_key_list_select_completion &#x3D; [&#39;&lt;c-n&gt;&#39;, &#39;&lt;Down&gt;&#39;]  &quot; 映射按键,没有这个会拦截掉tab, 导致其他插件的tab不能用.</span><br><span class="line">let g:ycm_key_list_previous_completion &#x3D; [&#39;&lt;c-p&gt;&#39;, &#39;&lt;Up&gt;&#39;]</span><br><span class="line">let g:ycm_complete_in_comments &#x3D; 1                          &quot; 在注释输入中也能补全</span><br><span class="line">let g:ycm_complete_in_strings &#x3D; 1                           &quot; 在字符串输入中也能补全</span><br><span class="line">let g:ycm_collect_identifiers_from_comments_and_strings &#x3D; 1 &quot; 注释和字符串中的文字也会被收入补全</span><br><span class="line">let g:ycm_global_ycm_extra_conf&#x3D;&#39;~&#x2F;.vim&#x2F;bundle&#x2F;YouCompleteMe&#x2F;third_party&#x2F;ycmd&#x2F;cpp&#x2F;ycm&#x2F;.ycm_extra_conf.py&#39;</span><br><span class="line">let g:ycm_show_diagnostics_ui &#x3D; 0                           &quot; 禁用语法检查</span><br><span class="line">inoremap &lt;expr&gt; &lt;CR&gt; pumvisible() ? &quot;\&lt;C-y&gt;&quot; : &quot;\&lt;CR&gt;&quot;             &quot; 回车即选中当前项</span><br><span class="line">nnoremap &lt;c-j&gt; :YcmCompleter GoToDefinitionElseDeclaration&lt;CR&gt;     &quot; 跳转到定义处</span><br><span class="line">let g:ycm_min_num_of_chars_for_completion&#x3D;2                 &quot; 从第2个键入字符就开始罗列匹配项</span><br><span class="line">&quot;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&quot; github 仓库中的插件 &quot;</span><br><span class="line">Plugin &#39;VundleVim&#x2F;Vundle.vim&#39;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">Plugin &#39;vim-airline&#x2F;vim-airline&#39;</span><br><span class="line">&quot;vim-airline配置:优化vim界面&quot;</span><br><span class="line">&quot;let g:airline#extensions#tabline#enabled &#x3D; 1</span><br><span class="line">&quot; airline设置</span><br><span class="line">&quot; 显示颜色</span><br><span class="line">set t_Co&#x3D;256</span><br><span class="line">set laststatus&#x3D;2</span><br><span class="line">&quot; 使用powerline打过补丁的字体</span><br><span class="line">let g:airline_powerline_fonts &#x3D; 1</span><br><span class="line">&quot; 开启tabline</span><br><span class="line">let g:airline#extensions#tabline#enabled &#x3D; 1</span><br><span class="line">&quot; tabline中当前buffer两端的分隔字符</span><br><span class="line">let g:airline#extensions#tabline#left_sep &#x3D; &#39; &#39;</span><br><span class="line">&quot; tabline中未激活buffer两端的分隔字符</span><br><span class="line">let g:airline#extensions#tabline#left_alt_sep &#x3D; &#39; &#39;</span><br><span class="line">&quot; tabline中buffer显示编号</span><br><span class="line">let g:airline#extensions#tabline#buffer_nr_show &#x3D; 1</span><br><span class="line">&quot; 映射切换buffer的键位</span><br><span class="line">nnoremap [b :bp&lt;CR&gt;</span><br><span class="line">nnoremap ]b :bn&lt;CR&gt;</span><br><span class="line">&quot; 映射&lt;leader&gt;num到num buffer</span><br><span class="line">map &lt;leader&gt;1 :b 1&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;2 :b 2&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;3 :b 3&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;4 :b 4&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;5 :b 5&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;6 :b 6&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;7 :b 7&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;8 :b 8&lt;CR&gt;</span><br><span class="line">map &lt;leader&gt;9 :b 9&lt;CR&gt;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&quot; vim-scripts 中的插件 &quot;</span><br><span class="line">Plugin &#39;taglist.vim&#39;</span><br><span class="line">&quot;ctags 配置:F3快捷键显示程序中的各种tags，包括变量和函数等。</span><br><span class="line">map &lt;F3&gt; :TlistToggle&lt;CR&gt;</span><br><span class="line">let Tlist_Use_Right_Window&#x3D;1</span><br><span class="line">let Tlist_Show_One_File&#x3D;1</span><br><span class="line">let Tlist_Exit_OnlyWindow&#x3D;1</span><br><span class="line">let Tlist_WinWidt&#x3D;25</span><br><span class="line"> </span><br><span class="line">Plugin &#39;The-NERD-tree&#39;</span><br><span class="line">&quot;NERDTree 配置:F2快捷键显示当前目录树</span><br><span class="line">map &lt;F2&gt; :NERDTreeToggle&lt;CR&gt;</span><br><span class="line">let NERDTreeWinSize&#x3D;25 </span><br><span class="line"> </span><br><span class="line">Plugin &#39;indentLine.vim&#39;</span><br><span class="line">Plugin &#39;delimitMate.vim&#39;</span><br><span class="line"> </span><br><span class="line">&quot; 非 github 仓库的插件&quot;</span><br><span class="line">&quot; Plugin &#39;git:&#x2F;&#x2F;git.wincent.com&#x2F;command-t.git&#39;</span><br><span class="line">&quot; 本地仓库的插件 &quot;</span><br><span class="line"> </span><br><span class="line">call vundle#end()</span><br><span class="line"> </span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;新文件标题</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot;新建.c,.h,.sh,.java文件，自动插入文件头 </span><br><span class="line">autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec &quot;:call SetTitle()&quot; </span><br><span class="line">&quot;&quot;定义函数SetTitle，自动插入文件头 </span><br><span class="line">func SetTitle() </span><br><span class="line">&quot;如果文件类型为.sh文件 </span><br><span class="line">if &amp;filetype &#x3D;&#x3D; &#39;sh&#39; </span><br><span class="line">call setline(1, &quot;##########################################################################&quot;) </span><br><span class="line">call append(line(&quot;.&quot;), &quot;# File Name: &quot;.expand(&quot;%&quot;)) </span><br><span class="line">call append(line(&quot;.&quot;)+1, &quot;# Author: Kevin&quot;) </span><br><span class="line">call append(line(&quot;.&quot;)+2, &quot;# mail: 1114010293@qq.com&quot;) </span><br><span class="line">call append(line(&quot;.&quot;)+3, &quot;# Created Time: &quot;.strftime(&quot;%c&quot;)) </span><br><span class="line">call append(line(&quot;.&quot;)+4, &quot;#########################################################################&quot;) </span><br><span class="line">call append(line(&quot;.&quot;)+5, &quot;#!&#x2F;bin&#x2F;zsh&quot;)</span><br><span class="line">call append(line(&quot;.&quot;)+6, &quot;PATH&#x3D;&#x2F;home&#x2F;edison&#x2F;bin:&#x2F;home&#x2F;edison&#x2F;.local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin:&#x2F;usr&#x2F;games:&#x2F;usr&#x2F;local&#x2F;games:&#x2F;snap&#x2F;bin:&#x2F;work&#x2F;tools&#x2F;gcc-3.4.5-glibc-2.3.6&#x2F;bin&quot;)</span><br><span class="line">call append(line(&quot;.&quot;)+7, &quot;export PATH&quot;)</span><br><span class="line">call append(line(&quot;.&quot;)+8, &quot;&quot;)</span><br><span class="line">else </span><br><span class="line">call setline(1, &quot;&#x2F;*************************************************************************&quot;) </span><br><span class="line">call append(line(&quot;.&quot;), &quot;&gt; File Name: &quot;.expand(&quot;%&quot;)) </span><br><span class="line">call append(line(&quot;.&quot;)+1, &quot;&gt; Author: amoscykl&quot;) </span><br><span class="line">call append(line(&quot;.&quot;)+2, &quot;&gt; Mail: amoscykl@163.com &quot;) </span><br><span class="line">call append(line(&quot;.&quot;)+3, &quot;&gt; Created Time: &quot;.strftime(&quot;%c&quot;)) </span><br><span class="line">call append(line(&quot;.&quot;)+4, &quot; ************************************************************************&#x2F;&quot;) </span><br><span class="line">call append(line(&quot;.&quot;)+5, &quot;&quot;)</span><br><span class="line">endif</span><br><span class="line">if &amp;filetype &#x3D;&#x3D; &#39;cpp&#39;</span><br><span class="line">call append(line(&quot;.&quot;)+6, &quot;#include&lt;iostream&gt;&quot;)</span><br><span class="line">    call append(line(&quot;.&quot;)+7, &quot;using namespace std;&quot;)</span><br><span class="line">call append(line(&quot;.&quot;)+8, &quot;&quot;)</span><br><span class="line">endif</span><br><span class="line">if &amp;filetype &#x3D;&#x3D; &#39;c&#39;</span><br><span class="line">call append(line(&quot;.&quot;)+6, &quot;#include&lt;stdio.h&gt;&quot;)</span><br><span class="line">call append(line(&quot;.&quot;)+7, &quot;&quot;)</span><br><span class="line">endif</span><br><span class="line">&quot;if &amp;filetype &#x3D;&#x3D; &#39;java&#39;</span><br><span class="line">&quot;call append(line(&quot;.&quot;)+6,&quot;public class &quot;.expand(&quot;%&quot;))</span><br><span class="line">&quot;call append(line(&quot;.&quot;)+7,&quot;&quot;)</span><br><span class="line">&quot;endif</span><br><span class="line">&quot;新建文件后，自动定位到文件末尾</span><br><span class="line">autocmd BufNewFile * normal G</span><br><span class="line">endfunc </span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot;键盘命令</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line"> </span><br><span class="line">nmap &lt;leader&gt;w :w!&lt;cr&gt;</span><br><span class="line">nmap &lt;leader&gt;f :find&lt;cr&gt;</span><br><span class="line"> </span><br><span class="line">&quot; 映射全选+复制 ctrl+a</span><br><span class="line">map &lt;C-A&gt; ggVGY</span><br><span class="line">map! &lt;C-A&gt; &lt;Esc&gt;ggVGY</span><br><span class="line">map &lt;F12&gt; gg&#x3D;G</span><br><span class="line">&quot; 选中状态下 Ctrl+c 复制</span><br><span class="line">vmap &lt;C-c&gt; &quot;+y</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot;&quot;实用设置</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class="line">&quot; 设置当文件被改动时自动载入</span><br><span class="line">set autoread</span><br><span class="line">&quot; quickfix模式</span><br><span class="line">autocmd FileType c,cpp map &lt;buffer&gt; &lt;leader&gt;&lt;space&gt; :w&lt;cr&gt;:make&lt;cr&gt;</span><br><span class="line">&quot;代码补全 </span><br><span class="line">set completeopt&#x3D;preview,menu </span><br><span class="line">&quot;允许插件  </span><br><span class="line">filetype plugin on</span><br><span class="line">&quot;共享剪贴板  </span><br><span class="line">set clipboard&#x3D;unnamed </span><br><span class="line">&quot;从不备份  </span><br><span class="line">set nobackup</span><br><span class="line">&quot;make 运行</span><br><span class="line">:set makeprg&#x3D;g++\ -Wall\ \ %</span><br><span class="line">&quot;自动保存</span><br><span class="line">set autowrite</span><br><span class="line">set ruler                   &quot; 打开状态栏标尺</span><br><span class="line">set cursorline              &quot; 突出显示当前行</span><br><span class="line">set magic                   &quot; 设置魔术</span><br><span class="line">set guioptions-&#x3D;T           &quot; 隐藏工具栏</span><br><span class="line">set guioptions-&#x3D;m           &quot; 隐藏菜单栏</span><br><span class="line">&quot;set statusline&#x3D;\ %&lt;%F[%1*%M%*%n%R%H]%&#x3D;\ %y\ %0(%&#123;&amp;fileformat&#125;\ %&#123;&amp;encoding&#125;\ %c:%l&#x2F;%L%)\</span><br><span class="line">&quot; 设置在状态行显示的信息</span><br><span class="line">set foldcolumn&#x3D;0</span><br><span class="line">set foldmethod&#x3D;indent </span><br><span class="line">set foldlevel&#x3D;3 </span><br><span class="line">set foldenable              &quot; 开始折叠</span><br><span class="line">&quot; 不要使用vi的键盘模式，而是vim自己的</span><br><span class="line">set nocompatible</span><br><span class="line">&quot; 语法高亮</span><br><span class="line">set syntax&#x3D;on</span><br><span class="line">&quot; 去掉输入错误的提示声音</span><br><span class="line">set noeb</span><br><span class="line">&quot; 在处理未保存或只读文件的时候，弹出确认</span><br><span class="line">set confirm</span><br><span class="line">&quot; 自动缩进</span><br><span class="line">set autoindent</span><br><span class="line">set cindent</span><br><span class="line">&quot; Tab键的宽度</span><br><span class="line">set tabstop&#x3D;4</span><br><span class="line">&quot; 统一缩进为4</span><br><span class="line">set softtabstop&#x3D;4</span><br><span class="line">set shiftwidth&#x3D;4</span><br><span class="line">&quot; 不要用空格代替制表符</span><br><span class="line">set noexpandtab</span><br><span class="line">&quot; 在行和段开始处使用制表符</span><br><span class="line">set smarttab</span><br><span class="line">&quot; 显示行号</span><br><span class="line">set number</span><br><span class="line">&quot; 历史记录数</span><br><span class="line">set history&#x3D;1000</span><br><span class="line">&quot;禁止生成临时文件</span><br><span class="line">set nobackup</span><br><span class="line">set noswapfile</span><br><span class="line">&quot;搜索忽略大小写</span><br><span class="line">set ignorecase</span><br><span class="line">&quot;搜索逐字符高亮</span><br><span class="line">set hlsearch</span><br><span class="line">set incsearch</span><br><span class="line">&quot;行内替换</span><br><span class="line">set gdefault</span><br><span class="line">&quot;编码设置</span><br><span class="line">set enc&#x3D;utf-8</span><br><span class="line">set fencs&#x3D;utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936</span><br><span class="line">&quot;语言设置</span><br><span class="line">set langmenu&#x3D;zh_CN.UTF-8</span><br><span class="line">set helplang&#x3D;cn</span><br><span class="line">&quot; 我的状态行显示的内容（包括文件类型和解码）</span><br><span class="line">set statusline&#x3D;%F%m%r%h%w\ [FORMAT&#x3D;%&#123;&amp;ff&#125;]\ [TYPE&#x3D;%Y]\ [POS&#x3D;%l,%v][%p%%]\ %&#123;strftime(\&quot;%d&#x2F;%m&#x2F;%y\ -\ %H:%M\&quot;)&#125;</span><br><span class="line">set statusline&#x3D;[%F]%y%r%m%*%&#x3D;[Line:%l&#x2F;%L,Column:%c][%p%%]</span><br><span class="line">&quot; 总是显示状态行</span><br><span class="line">set laststatus&#x3D;2</span><br><span class="line">&quot; 命令行（在状态行下）的高度，默认为1，这里是2</span><br><span class="line">set cmdheight&#x3D;2</span><br><span class="line">&quot; 侦测文件类型</span><br><span class="line">filetype on</span><br><span class="line">&quot; 载入文件类型插件</span><br><span class="line">filetype plugin on</span><br><span class="line">&quot; 为特定文件类型载入相关缩进文件</span><br><span class="line">filetype indent on</span><br><span class="line">&quot; 保存全局变量</span><br><span class="line">set viminfo+&#x3D;!</span><br><span class="line">&quot; 带有如下符号的单词不要被换行分割</span><br><span class="line">set iskeyword+&#x3D;_,$,@,%,#,-</span><br><span class="line">&quot; 字符间插入的像素行数目</span><br><span class="line">set linespace&#x3D;0</span><br><span class="line">&quot; 增强模式中的命令行自动完成操作</span><br><span class="line">set wildmenu</span><br><span class="line">&quot; 使回格键（backspace）正常处理indent, eol, start等</span><br><span class="line">set backspace&#x3D;2</span><br><span class="line">&quot; 允许backspace和光标键跨越行边界</span><br><span class="line">set whichwrap+&#x3D;&lt;,&gt;,h,l</span><br><span class="line">&quot; 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）</span><br><span class="line">set mouse&#x3D;a</span><br><span class="line">set selection&#x3D;exclusive</span><br><span class="line">set selectmode&#x3D;mouse,key</span><br><span class="line">&quot; 通过使用: commands命令，告诉我们文件的哪一行被改变过</span><br><span class="line">set report&#x3D;0</span><br><span class="line">&quot; 在被分割的窗口间显示空白，便于阅读</span><br><span class="line">set fillchars&#x3D;vert:\ ,stl:\ ,stlnc:\</span><br><span class="line">&quot; 高亮显示匹配的括号</span><br><span class="line">set showmatch</span><br><span class="line">&quot; 匹配括号高亮的时间（单位是十分之一秒）</span><br><span class="line">set matchtime&#x3D;1</span><br><span class="line">&quot; 光标移动到buffer的顶部和底部时保持3行距离</span><br><span class="line">set scrolloff&#x3D;3</span><br><span class="line">&quot; 为C程序提供自动缩进</span><br><span class="line">set smartindent</span><br><span class="line">&quot; 高亮显示普通txt文件（需要txt.vim脚本）</span><br><span class="line"> au BufRead,BufNewFile *  setfiletype txt</span><br><span class="line">&quot;自动补全</span><br><span class="line">:inoremap ( ()&lt;ESC&gt;i</span><br><span class="line">:inoremap ) &lt;c-r&gt;&#x3D;ClosePair(&#39;)&#39;)&lt;CR&gt;</span><br><span class="line">&quot;:inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O</span><br><span class="line">&quot;:inoremap &#125; &lt;c-r&gt;&#x3D;ClosePair(&#39;&#125;&#39;)&lt;CR&gt;</span><br><span class="line">:inoremap [ []&lt;ESC&gt;i</span><br><span class="line">:inoremap ] &lt;c-r&gt;&#x3D;ClosePair(&#39;]&#39;)&lt;CR&gt;</span><br><span class="line">:inoremap &quot; &quot;&quot;&lt;ESC&gt;i</span><br><span class="line">:inoremap &#39; &#39;&#39;&lt;ESC&gt;i</span><br><span class="line">function! ClosePair(char)</span><br><span class="line">if getline(&#39;.&#39;)[col(&#39;.&#39;) - 1] &#x3D;&#x3D; a:char</span><br><span class="line">return &quot;\&lt;Right&gt;&quot;</span><br><span class="line">else</span><br><span class="line">return a:char</span><br><span class="line">endif</span><br><span class="line">endfunction</span><br><span class="line">filetype plugin indent on </span><br><span class="line">&quot;打开文件类型检测, 加了这句才可以用智能补全</span><br><span class="line">set completeopt&#x3D;longest,menu</span><br><span class="line">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p>如打开 Vim 出现下面的情况，则可能是没安装TagList插件所需要的 <strong>catags</strong></p><p><code>Taglist: Exuberant ctags (http://ctags.sf.net) not found in PATH. Plugin is not loaded.请按 ENTER 或其它命令继续</code></p><p>解决办法：</p><p><code>$ sudo apt-get install ctags</code></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;作为非常强大的vim编辑器，再加上一些辅助插件简直如虎添翼，而配置参数一定是通过精心的设置&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>gcc/g++ 编译</title>
    <link href="http://yoursite.com/2020/10/02/gccg++%20%E5%B8%B8%E7%94%A8%E7%BC%96%E8%AF%91/"/>
    <id>http://yoursite.com/2020/10/02/gccg++%20%E5%B8%B8%E7%94%A8%E7%BC%96%E8%AF%91/</id>
    <published>2020-10-02T08:34:01.000Z</published>
    <updated>2020-10-09T08:04:23.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>gcc/g++ 编译器作为编写C/C++程序离不开的工具，而gdb又是调试C/C++的利器，所谓工欲善其事必先利其器，该篇文章将记录一些常用选项以及方法</p></blockquote><a id="more"></a><h1 id="gcc-g-常用编译"><a href="#gcc-g-常用编译" class="headerlink" title="gcc/g++ 常用编译"></a>gcc/g++ 常用编译</h1><p>编译命令格式：</p><p>C：<code>$ gcc [选项] [参数]</code></p><p>C++：<code>$ g++ [选项] [参数]</code></p><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>-o</td><td>指定生成文件的文件名</td></tr><tr><td>-g</td><td>在目标文件中添加调试信息，用于gdb调试或objdump反编译</td></tr><tr><td>-Wall</td><td>显示所有的警告信息</td></tr><tr><td>-v</td><td>显示编译过程</td></tr><tr><td>-c</td><td>生成目标文件，但不进行链接</td></tr><tr><td>-On</td><td>(n=0,1,2,3) 设置编译器优化等级，O0为不优化，O3为最高等级优化，O1为默认优化等级</td></tr><tr><td>-L</td><td>指定库文件的搜索目录</td></tr><tr><td>-l</td><td>（小写L）链接某一库</td></tr><tr><td>-I</td><td>（大写i）指定头文件路径</td></tr><tr><td>-D</td><td>定义宏，例如：-DAAA-1，-DBBBB</td></tr><tr><td>-U</td><td>取消宏定义，例如：-UAAA</td></tr></tbody></table><h1 id="gdb-调试方法"><a href="#gdb-调试方法" class="headerlink" title="gdb 调试方法"></a>gdb 调试方法</h1><p>gdb属于调试工具，需要下载安装才可以使用</p><p>这里不介绍 gdb 的安装方法，可自行网上搜索</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>安装好之后，打开命令行，输入</p><p><code>$ gdb -v</code></p><p>终端返回<strong>有关gdb版本</strong>相关信息，就说明 gdb 安装成功</p><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>要想源码被gdb调试，必须在调试的时候加上调试信息，即是加 -g 选项</p><p><code>$ gcc -g example.c -o example</code></p><p>如上，我们生成了一个带有调试信息的可执行文件example，然后接着输入：</p><p><code>$ gdb example</code></p><p>这样便进入gdb调试命令行(<strong>‘quit’</strong>退出)，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">GNU gdb (Debian 8.2.1-2+b1) 8.2.1</span><br><span class="line">Copyright (C) 2018 Free Software Foundation, Inc.</span><br><span class="line">License GPLv3+: GNU GPL version 3 or later &lt;http:&#x2F;&#x2F;gnu.org&#x2F;licenses&#x2F;gpl.html&gt;</span><br><span class="line">This is free software: you are free to change and redistribute it.</span><br><span class="line">There is NO WARRANTY, to the extent permitted by law.</span><br><span class="line">Type &quot;show copying&quot; and &quot;show warranty&quot; for details.</span><br><span class="line">This GDB was configured as &quot;x86_64-linux-gnu&quot;.</span><br><span class="line">Type &quot;show configuration&quot; for configuration details.</span><br><span class="line">For bug reporting instructions, please see:</span><br><span class="line">&lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;bugs&#x2F;&gt;.</span><br><span class="line">Find the GDB manual and other documentation resources online at:</span><br><span class="line">    &lt;http:&#x2F;&#x2F;www.gnu.org&#x2F;software&#x2F;gdb&#x2F;documentation&#x2F;&gt;.</span><br><span class="line"></span><br><span class="line">For help, type &quot;help&quot;.</span><br><span class="line">Type &quot;apropos word&quot; to search for commands related to &quot;word&quot;...</span><br><span class="line">Reading symbols from emample...done.</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><p>gdb所有命令都在（gdb）引导下输入执行</p><p>很多命令都有简写输入，尽量使用简写提高调试效率</p><p>单个命令执行完成后，回车可重复上一条命令，如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">(gdb) r</span><br><span class="line">Starting program: &#x2F;xxx&#x2F;emample </span><br><span class="line">Breakpoint 1, main () at demo.cpp:40</span><br><span class="line">40          int *p;</span><br><span class="line">(gdb) n</span><br><span class="line">41          printf(&quot;\n&quot;);</span><br><span class="line">(gdb) </span><br><span class="line"></span><br><span class="line">42          return 0;</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure><h3 id="打点命令"><a href="#打点命令" class="headerlink" title="打点命令"></a>打点命令</h3><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>l</td><td>（小写L）默认显示10行源代码（可回车直至末尾）</td></tr><tr><td>b/break</td><td>添加断点，格式：b 函数名；b 行号；b 文件名:行号；b 行号 if条件</td></tr><tr><td>info break</td><td>查看断点信息</td></tr><tr><td>disable <break number></td><td>禁用断点（enable <number>可解）</td></tr><tr><td>delete <break number></td><td>删除断点</td></tr></tbody></table><h3 id="调试命令"><a href="#调试命令" class="headerlink" title="调试命令"></a>调试命令</h3><table><thead><tr><th>选项</th><th>作用</th></tr></thead><tbody><tr><td>r/run</td><td>启动程序</td></tr><tr><td>p/print</td><td>查看变量</td></tr><tr><td>n/next</td><td>单步执行</td></tr><tr><td>s/step</td><td>跳入函数内部调试</td></tr><tr><td>watch <variable name></td><td>监控变量（info watch查看），同样可使用enable、disable、delete</td></tr><tr><td>display <variable name></td><td>断点每次执行后伴随打印变量值</td></tr><tr><td>shell</td><td>切入shell命令环境（<strong>‘exit’</strong>退出）</td></tr><tr><td>wi</td><td>可视化调试环境</td></tr></tbody></table>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;gcc/g++ 编译器作为编写C/C++程序离不开的工具，而gdb又是调试C/C++的利器，所谓工欲善其事必先利其器，该篇文章将记录一些常用选项以及方法&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="C/C++" scheme="http://yoursite.com/categories/C-C/"/>
    
    
    <category term="Linux" scheme="http://yoursite.com/tags/Linux/"/>
    
    <category term="C/C++" scheme="http://yoursite.com/tags/C-C/"/>
    
  </entry>
  
  <entry>
    <title>Notes_Computers</title>
    <link href="http://yoursite.com/2020/03/30/Notes_Computers/"/>
    <id>http://yoursite.com/2020/03/30/Notes_Computers/</id>
    <published>2020-03-30T03:33:43.000Z</published>
    <updated>2020-10-09T08:13:00.399Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>计算机综合基础考点，完善中…</p></blockquote><a id="more"></a><h2 id="计算机综合"><a href="#计算机综合" class="headerlink" title="计算机综合"></a>计算机综合</h2><p><a href="https://www.jianshu.com/p/cf36c5af997a" target="_blank" rel="noopener">数学语法</a></p><h3 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h3><p>　　数据结构的主要任务是通过分析数据对象的结构特征，包括逻辑结构及数据对象之间的关系，然后把逻辑结构表示成计算机课实现的物理结构，从而便于计算机处理。</p><h3 id="2-算法"><a href="#2-算法" class="headerlink" title="2. 算法"></a>2. 算法</h3><h4 id="2-1-数据结构和算法的关系"><a href="#2-1-数据结构和算法的关系" class="headerlink" title="2.1 数据结构和算法的关系"></a>2.1 数据结构和算法的关系</h4><p>程序 = 算法 + 数据结构</p><h4 id="2-2-算法的五大特性"><a href="#2-2-算法的五大特性" class="headerlink" title="2.2 算法的五大特性"></a>2.2 算法的五大特性</h4><p>有穷性、确定性、可行性、输入、输出</p><h3 id="3-C语言基础"><a href="#3-C语言基础" class="headerlink" title="3. C语言基础"></a>3. C语言基础</h3><h4 id="3-1-函数递归："><a href="#3-1-函数递归：" class="headerlink" title="3.1 函数递归："></a>3.1 函数递归：</h4><p>（1）直接递归（自己调用自己）<br>（2）间接递归（间接调用自己）</p><p>例1：利用递归求n! ：有两种情况，当n=0递归结束，返回值为1 ；当n !=0时，继续递归。<br>      <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int factorial (int n)&#123;</span><br><span class="line">    if(n &#x3D;&#x3D; 0)</span><br><span class="line">        return 1;</span><br><span class="line">     else</span><br><span class="line">         return n*factorial(n-1)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><h3 id="4-递归与迭代"><a href="#4-递归与迭代" class="headerlink" title="4. 递归与迭代"></a>4. 递归与迭代</h3><p>（1）递归使用的是选择结构<br>（2）迭代使用的是循环结构</p><h3 id="5-指针"><a href="#5-指针" class="headerlink" title="5. 指针"></a>5. 指针</h3><p>　　指针是一种变量，也称之为指针变量。指针的值就是变量的地址，而变量又拥有一个具体的值。因此可以理解为变量名直接引用一个值，指针间接地引用了一个值。<br>　　指针数组是一种存放一组变量的地址，数组指针可以进行自增或自减运算，但是数组名则不能进行自增或自减运算。</p><h3 id="6-结构体和联合体"><a href="#6-结构体和联合体" class="headerlink" title="6. 结构体和联合体"></a>6. 结构体和联合体</h3><p>　　也称共用体，是自定义的数据类型，用于构造非数值数据类型，在处理实际问题中应用非常广泛。数据结构中的链表、队列、树、图等结构都需要用到结构体。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;结构体类型</span><br><span class="line">struct teacher&#123;</span><br><span class="line">&#x2F;&#x2F;数据项</span><br><span class="line">    int no;</span><br><span class="line">    char name[20]</span><br><span class="line">    char sex[4];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>联合体与结构体一样，也是一种派生的数据类型。不同的是联合体的成员共享同一个存储空间。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;联合体类型</span><br><span class="line">union data&#123;</span><br><span class="line">    int a;</span><br><span class="line">    float b;</span><br><span class="line">    char c;</span><br><span class="line">&#125;abc;</span><br></pre></td></tr></table></figure><h3 id="7-链表"><a href="#7-链表" class="headerlink" title="7. 链表"></a>7. 链表</h3><p>　　链表可以动态分配内存，链表的长度随时可以发生变化。链表有一个指针类型的成员指向自身，该指针指向与结构体一样的类型。例如以下语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">struct node&#123;</span><br><span class="line">    int data</span><br><span class="line">    struct data *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　子引用结构体类型为struct node，该结构体类型有两个成员：整数成员data、指针成员next。成员next是指向结构体为struct node类型的指针。通过这种形式定义的结构体通过next指针把两个结构体变量连在一起。这种子引用结构体单元称为结点，结点之间通过箭头链接起来，构成一张表，称为链表。</p><h3 id="8-内存的分配与释放"><a href="#8-内存的分配与释放" class="headerlink" title="8. 内存的分配与释放"></a>8. 内存的分配与释放</h3><p>（1）malloc函数主要作用是分配一块长度为size的内存空间。void *malloc(unsigned int size); 其中，size就是要分配的内存空间大小字节。<br>（2）free函数主要作用是将内存空间释放。void free(void *p); 其中，参数p指向要释放的内存空间。不能使用已经被free函数释放的内存空间。</p><hr>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;计算机综合基础考点，完善中…&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="数据结构与算法" scheme="http://yoursite.com/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
    <category term="数据结构" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
    <category term="计算机综合" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%BC%E5%90%88/"/>
    
    <category term="算法" scheme="http://yoursite.com/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Windows10+Ubuntu双系统安装</title>
    <link href="http://yoursite.com/2020/01/22/Windows10-Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/"/>
    <id>http://yoursite.com/2020/01/22/Windows10-Ubuntu%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</id>
    <published>2020-01-22T08:11:13.000Z</published>
    <updated>2020-09-23T07:22:15.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作为一个程序员和一个休闲娱乐师怎么可能只用Linux，众所周知Win系统才具有快乐的源泉，该篇详细记录了双系统的安装，前提有Win噢</p></blockquote><a id="more"></a><h1 id="Windows10安装"><a href="#Windows10安装" class="headerlink" title="Windows10安装"></a>Windows10安装</h1><p>这里默认已安装！</p><h1 id="Ubuntua安装"><a href="#Ubuntua安装" class="headerlink" title="Ubuntua安装"></a>Ubuntua安装</h1><h2 id="1-准备工具"><a href="#1-准备工具" class="headerlink" title="1. 准备工具"></a>1. 准备工具</h2><p>1）下载一个最新镜像，建议在<a href="http://mirrors.163.com/ubuntu-releases/" target="_blank" rel="noopener">网易开源镜像站</a>下载对应的32位与64位包，官网：<a href="https://ubuntu.com/download/desktop" target="_blank" rel="noopener">https://ubuntu.com/download/desktop</a><br>2）软碟通，光盘映像文件制作/编辑/转换工具<a href="https://cn.ultraiso.net/xiazai.html" target="_blank" rel="noopener">https://cn.ultraiso.net/xiazai.html </a><br>3）准备一个大于8GB的U盘</p><h2 id="2-压缩卷"><a href="#2-压缩卷" class="headerlink" title="2. 压缩卷"></a>2. 压缩卷</h2><p>首先划分一片内存专门为Ubuntu使用，就好似我要在某个地方建一座房子，首先我得划分一块地，才能建</p><p>压缩完之后会有一块未分配的内存，这里的内存我给了<strong>40G</strong>也就是<strong>40960M</strong>，所以下图分区会有一个<strong>40G</strong>的未分配区域</p><p>“win+x“ -&gt; “磁盘管理” -&gt; “（选择磁盘）-&gt; ”压缩卷“ -&gt; “输入压缩空间量：40960（这里的内存切合个人实际内存）</p><p><img src="https://img-blog.csdnimg.cn/20191012181448623.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTQxMTc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191012181652226.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTQxMTc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="3-制作光盘映像文件"><a href="#3-制作光盘映像文件" class="headerlink" title="3. 制作光盘映像文件"></a>3. 制作光盘映像文件</h2><p>这是用于将ISO系统文件刻录成启动盘的工具，插入U盘，以管理员身份运行“软碟通”，快捷键“Ctrl+O”找到之前下载的最新系统打开，“启动” -&gt; “写入硬盘映像” -&gt; “写入”</p><p><img src="https://img-blog.csdnimg.cn/20191014152423482.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTQxMTc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>需要注意的是写入方式设置为——<strong>“USB+HDD+”</strong>（如果不是这个模式，可能导致电脑无法通过U盘正常启动）<br><img src="https://img-blog.csdnimg.cn/20191014153006397.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTQxMTc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>U盘启动盘做好之后，我们就需要重启进入电脑Boot menu<br>以下是一些常见启动菜单的快捷键<br><img src="https://img-blog.csdnimg.cn/2019101415505233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTQxMTc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h2 id="4-安装Ubuntu"><a href="#4-安装Ubuntu" class="headerlink" title="4. 安装Ubuntu"></a>4. 安装Ubuntu</h2><p>重启之后在启动菜单中选择自己的U盘，选择“Install Ubuntu”进入图形界面安装<br>过程中暂时不要安装软件，一路点继续，当问到“这台计算机已经安装了多个操作系统，您准备怎么做？”时，选择底部最后一个选项“其他选项”<br><img src="https://img-blog.csdnimg.cn/20191014155845611.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTQxMTc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><blockquote><p>大多数习惯了 Windows 的用户，对 Linux 的树型结构目录不是十分了解，但是不了解就不代表不会用。对于初级用户，一切从简，给 Ubuntu 四个分区，分别是根目录’/‘、交换空间 swap、引导分区目录’/boot’和 home 目录’/home’。根目录主要存储系统、软件还有一些其他文件，所有的文件都是由根目录衍生来的，所以这个分区尽可能大一点，至于具体如何规划这个分区不是现在需要考虑的。交换空间 swap 又叫做虚拟物理内存，它的功能计算机内存不太够用的时候存储那些不经常被 CPU 使用的程序，如果你的系统不是很忙，这个分区可以不需要。打个比方来理解引导分区目录，引导分区目录是摆在计算机开机时选择进入何种系统的 “大门”，没有这张“大门”，就算有了“钥匙” 也没有用。home 目录的作用理解为 Linux 各个用户下共享的文件夹。</p></blockquote><p>接下来选择之前划分好的空间，也就是“空闲”，点击加号，分配空间（四次）<br><img src="https://img-blog.csdnimg.cn/20191014160305721.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTQxMTc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><table><thead><tr><th>分区</th><th>挂载点</th><th>大小</th><th>新分区类型</th><th>空间起始位置用于</th></tr></thead><tbody><tr><td>第一次分区</td><td>/</td><td>10240MB</td><td>主分区</td><td>EXT4 日志文件系统</td></tr><tr><td>第二次分区</td><td>不设置</td><td>4096MB</td><td>逻辑分区</td><td>交换空间</td></tr><tr><td>第三次分区</td><td>/boot</td><td>400MB</td><td>逻辑分区</td><td>EXT4 日志文件系统</td></tr><tr><td>第四次分区</td><td>/home</td><td>剩余全部空间</td><td>逻辑分区</td><td>EXT4 日志文件系统</td></tr></tbody></table><p>&nbsp;</p><p><code>&quot;第四次分区&quot;完成后请不要马上点击“安装”!!!</code></p><p>&nbsp;<br>&nbsp;<br>分区完成之后，下方有项“安装启动引导器的设备”，如果默认该项，将是Ubuntu引导Windows，这里需要将该项<strong>设置为之前分区 “/boot” 所在分区的盘符</strong>，再点击“安装”<br><img src="https://img-blog.csdnimg.cn/201910141641229.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTQxMTc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>安装后系统提示“重启”，重启之后回车“Ubuntu”，或者无操作自动进入Ubuntu，会发现屏幕一直是同一个颜色，并且无响应<br>不要担心，电脑并没有变成砖块，只是系统底层“安全启动”在阻碍“Ubuntu系统”的启动</p><p>只要显示过如下图的页面，你就已经成功安装<br><img src="https://img-blog.csdnimg.cn/20191014165314266.png" alt="在这里插入图片描述"><br>解决方法：<br>关闭“安全启动”<br>如上图页面，选择最后一个选项，便直接进入Bios，选择“Security” -&gt; “Secure Boot” -&gt; “ Disabled”<br><img src="https://img-blog.csdnimg.cn/20191014195450561.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTQxMTc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20191014195527109.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTQxMTc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>“Enabled”：开启<br>“Disabled”：禁用<br>这里选择“禁用”，Esc返回上一层保存退出</p><h2 id="5-安装-EasyBCD-2-3"><a href="#5-安装-EasyBCD-2-3" class="headerlink" title="5. 安装 EasyBCD 2.3"></a>5. 安装 EasyBCD 2.3</h2><p>这个软件是用于系统配置创建多重启动系统的引导文件<br>“添加新条目” -&gt; “Linux/BSD” -&gt; 类型“GRUB(Legacy)” -&gt; “选择驱动器(/boot)” -&gt; “添加条目”</p><p>保存重启<br><img src="https://img-blog.csdnimg.cn/20191016094912923.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTQxMTc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>当开机后有如下“NeSmart Linux”选项便大功告成！<br><img src="https://img-blog.csdnimg.cn/20191016095928326.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTQxMTc5,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>ps：</p><ul><li>需要注意的是笔记本带有独立显卡的友友注意了，在插入U盘安装（光标移动到 instll ubuntu处)时，按下“E”键，进入编辑模式，把”—“改成”nomodeset”，防止系统安装过程中卡死无响应（不支持独显导致），F10保存进入安装界面</li><li>支持UEFI启动的本子，理论预装win8/win10都支持，将教程上方 /boot 分区修改成 /efi 分区，“安装启动引导器的设备”修改成 /efi 分区所在盘符。（提升启动速度，详情百度参考）</li></ul><p><a href="https://blog.csdn.net/mtllyb/article/details/78635757" target="_blank" rel="noopener">→彻底删除EFI分区及启动项</a></p><p><em>参考教程：<a href="https://www.libinx.com/2017/five-steps-win10-ubuntu-dual-boot/" target="_blank" rel="noopener">https://www.libinx.com/2017/five-steps-win10-ubuntu-dual-boot/</a></em></p>]]></content>
    
    
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;作为一个程序员和一个休闲娱乐师怎么可能只用Linux，众所周知Win系统才具有快乐的源泉，该篇详细记录了双系统的安装，前提有Win噢&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    
  </entry>
  
</feed>
